1. I overcame an issue where I kept getting segmentation faults due to not having initialized the locally defined arrays to a given value; the program would just overwrite the previous test strings, and later assertions would
fail as a result of it not actually testing the right things. It took me a long while to figure out the mistake that I was making, as it continually escaped me why repeated applications of the function could somehow see previous
tests. Besides that, just the program itself took me a while to come up with an optimal way to do, as I was unsure of whether I should somehow run a disgusting loop to compare strings between every space or something along those lines.
I'm fairly happy with the way I went about it, however.

2. The function makeproper runs a while loop to check each condition: negative separation, if a word has a non alphabetic character, and if a row is duplicate through the function checkifdupe. The killrow function kills the row,
shift every row one up and subtracts from nPatterns to return the number of remaining rows. The function fuzzyStrCmp makes the comparison case-insensitive. Checkifdupe is a boolean that passes an integer by reference to contain
the row to delete.

Rate works by calling ratePatterns and adding the ratePatterns value of each row in the arrays. ratePatterns first calls documentWords, which stores all the words (ignoring non alphabetic letters) 


3.  char a5[250] = "The k'illiam william illiam the illest";
    assert(ratePattern(a5, "Killiam", "The", 0) == 1);
    assert(ratePattern(a5, "Illest", "The", 0) == 1);
    assert(ratePattern(a5, "The", "Illest", 5) == 1);
    assert(ratePattern(a5, "Brosephine", "The", 0) == 0);
    assert(ratePattern(a5, "The", "Killiam", 0) == 1);
    assert(ratePattern(a5, "The", "illiam", 2) == 1);
    char b7[250] = "Friends friend's frenemiss-johansson aaaaaaaaaaaaaaaaaaa is";
    assert(ratePattern("My friend's friends' friends killed Bronson", "friends", "Bronson", 3) == 1);
    assert(ratePattern(b7, "is", "aaaaaaaaaaaaaaaaaaa", 0) == 1);
    assert(ratePattern(b7, "aaaaaaaaaaaaaaaaaaa", "is", 0) == 1);
    assert(ratePattern("This project took me over 24 32 ---- hours", "over", "hours", 0) == 1);char a5[250] = "The k'illiam william illiam the illest";
    assert(ratePattern(a5, "Killiam", "The", 0) == 1);
    assert(ratePattern(a5, "Illest", "The", 0) == 1);
    assert(ratePattern(a5, "The", "Illest", 5) == 1);
    assert(ratePattern(a5, "Brosephine", "The", 0) == 0);
    assert(ratePattern(a5, "The", "Killiam", 0) == 1);
    assert(ratePattern(a5, "The", "illiam", 2) == 1);
    char b7[250] = "Friends friend's frenemiss-johansson aaaaaaaaaaaaaaaaaaa is";
    assert(ratePattern("My friend's friends' friends killed Bronson", "friends", "Bronson", 3) == 1);
    assert(ratePattern(b7, "is", "aaaaaaaaaaaaaaaaaaa", 0) == 1);
    assert(ratePattern(b7, "aaaaaaaaaaaaaaaaaaa", "is", 0) == 1);

I used the above test cases to cover some basic ground on things I was doubting the function ratePattern's ability to do. For makeProper, I used the following array to test makeProper:

mad have 3
nefa1ri1ous plot 5
nefarious plot 4
NEFArious PloT 7
deranged robot 4
robot deranged 4
greater cause -6
juvenile turkey-ham 12
